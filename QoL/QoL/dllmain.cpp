// dllmain.cpp : Defines the entry point for the DLL application.
#include "pch.h"
#include "Hooks.h"

/* ---------------- LIN + Type C ---------------- */

//[00B85363]
BYTE DT_1_Original[9] = { 0x8B, 0x48, 0x20, 0x69, 0xC9, 0x74, 0x8C, 0x00, 0x00 };
BYTE DT_1_Modded[59] = { 0x8B, 0x75, 0x08, 0x8B, 0x86, 0x40, 0x10, 0x00, 0x00, 0x80, 0xB8, 0xFC, 0x30, 0x00, 0x00, 0x00, 0x0F, 0x85, 0, 0, 0, 0, 0xA1, 0xB8, 0x31, 0x1A, 0x01, 0x8B, 0x48, 0x20, 0x69, 0xC9, 0x74, 0x8C, 0x00, 0x00, 0x8B, 0x84, 0x08, 0x94, 0x00, 0x00, 0x00, 0x83, 0xF8, 0x01, 0x0F, 0x85, 0, 0, 0, 0, 0x31, 0xC0, 0xE9, 0, 0, 0, 0 };

//[00B85AA9]
BYTE DT_2_Original[7] = { 0x83, 0xB8, 0x98, 0x00, 0x00, 0x00, 0x00 };
BYTE DT_2_Modded[67] = { 0x8B, 0x8E, 0x40, 0x10, 0x00, 0x00, 0x80, 0xB9, 0xFC, 0x30, 0x00, 0x00, 0x00, 0x0F, 0x85, 0, 0, 0, 0, 0x83, 0xB8, 0x98, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x85, 0, 0, 0, 0, 0xA1, 0xB8, 0x31, 0x1A, 0x01, 0x8B, 0x48, 0x20, 0x69, 0xC9, 0x74, 0x8C, 0x00, 0x00, 0x8B, 0x84, 0x08, 0x94, 0x00, 0x00, 0x00, 0x83, 0xF8, 0x02, 0x0F, 0x85, 0, 0, 0, 0, 0xE9, 0, 0, 0, 0 };

//[00B7493E]
BYTE DT_3_Original[8] = { 0x84, 0xC0, 0x0F, 0x85, 0xC4, 0x01, 0x00, 0x00 };
BYTE DT_3_Modded[62] = { 0x84, 0xC0, 0x0F, 0x85, 0, 0, 0, 0, 0x8B, 0x86, 0x40, 0x10, 0x00, 0x00, 0x80, 0xB8, 0xFC, 0x30, 0x00, 0x00, 0x00, 0x0F, 0x85, 0, 0, 0, 0, 0xA1, 0xB8, 0x31, 0x1A, 0x01, 0x8B, 0x48, 0x20, 0x69, 0xC9, 0x74, 0x8C, 0x00, 0x00, 0x8B, 0x84, 0x08, 0x94, 0x00, 0x00, 0x00, 0x83, 0xF8, 0x02, 0x0F, 0x85, 0, 0, 0, 0, 0xE9, 0, 0, 0, 0 };

//[00B845EA]
BYTE DT_4_Original[5] = { 0xA1, 0xB8, 0x31, 0x1A, 0x01 };
BYTE DT_4_Modded[29] = { 0x8B, 0x86, 0x40, 0x10, 0x00, 0x00, 0x80, 0xB8, 0xFC, 0x30, 0x00, 0x00, 0x00, 0x0F, 0x85, 0, 0, 0, 0, 0xA1, 0xB8, 0x31, 0x1A, 0x01, 0xE9, 0, 0, 0, 0 };

//[00B73CDA]
BYTE DT_5_Original[5] = { 0xA1, 0xB8, 0x31, 0x1A, 0x01 };
BYTE DT_5_Modded[29] = { 0x8B, 0x86, 0x40, 0x10, 0x00, 0x00, 0x80, 0xB8, 0xFC, 0x30, 0x00, 0x00, 0x00, 0x0F, 0x85, 0, 0, 0, 0, 0xA1, 0xB8, 0x31, 0x1A, 0x01, 0xE9, 0, 0, 0, 0 };

//[00B867C5]
BYTE DT_6_Original[7] = { 0x83, 0xBB, 0x98, 0x00, 0x00, 0x00, 0x00 };
BYTE DT_6_Modded[31] = { 0x8B, 0x8F, 0x40, 0x10, 0x00, 0x00, 0x80, 0xB9, 0xFC, 0x30, 0x00, 0x00, 0x00, 0x0F, 0x85, 0, 0, 0, 0, 0x83, 0xBB, 0x98, 0x00, 0x00, 0x00, 0x00, 0xE9, 0, 0, 0, 0 };

//[00B8721C]
BYTE DT_7_Original[7] = { 0xF6, 0x87, 0x7E, 0x2D, 0x00, 0x00, 0x01 };
BYTE DT_7_Modded[31] = { 0x8B, 0x8F, 0x40, 0x10, 0x00, 0x00, 0x80, 0xB9, 0xFC, 0x30, 0x00, 0x00, 0x00, 0x0F, 0x85, 0, 0, 0, 0, 0xF6, 0x87, 0x7E, 0x2D, 0x00, 0x00, 0x01, 0xE9, 0, 0, 0, 0 };

//[00B67FC2]
BYTE DT_8_Original[7] = { 0x8B, 0x8C, 0x24, 0xBC, 0x00, 0x00, 0x00 };
BYTE DT_8_Modded[42] = { 0xA1, 0xB8, 0x31, 0x1A, 0x01, 0x8B, 0x48, 0x20, 0x69, 0xC9, 0x74, 0x8C, 0x00, 0x00, 0x8B, 0x84, 0x08, 0x94, 0x00, 0x00, 0x00, 0x8B, 0x8C, 0x24, 0xBC, 0x00, 0x00, 0x00, 0x83, 0xF8, 0x02, 0x0F, 0x84, 0, 0, 0, 0, 0xE9, 0, 0, 0, 0 };

//[00849A6F]
BYTE DT_9_Original[9] = { 0x8B, 0x48, 0x20, 0x69, 0xC9, 0x74, 0x8C, 0x00, 0x00 };
BYTE DT_9_Modded[30] = { 0x8B, 0x48, 0x20, 0x69, 0xC9, 0x74, 0x8C, 0x00, 0x00, 0x8B, 0x84, 0x08, 0x94, 0x00, 0x00, 0x00, 0x83, 0xF8, 0x01, 0x0F, 0x85, 0, 0, 0, 0, 0xE9, 0, 0, 0, 0 };

//[00B78AC3]
BYTE DT_10_Original[8] = { 0x33, 0xDB, 0x39, 0x9E, 0xA8, 0x2D, 0x00, 0x00 };
BYTE DT_10_Modded[52] = { 0xA1, 0xB8, 0x31, 0x1A, 0x01, 0x8B, 0x48, 0x20, 0x69, 0xC9, 0x74, 0x8C, 0x00, 0x00, 0x8B, 0x84, 0x08, 0x94, 0x00, 0x00, 0x00, 0x83, 0xF8, 0x02, 0x0F, 0x94, 0xC3, 0x88, 0x9E, 0x20, 0x29, 0x00, 0x00, 0x31, 0xDB, 0x89, 0x9E, 0x54, 0x1F, 0x00, 0x00, 0x39, 0x9E, 0xA8, 0x2D, 0x00, 0x00, 0xE9, 0, 0, 0, 0 };

//[00B89AC6]
BYTE DT_11_Original[8] = { 0x83, 0xBC, 0x01, 0x94, 0x00, 0x00, 0x00, 0x00 };
BYTE DT_11_Modded[19] = { 0x83, 0xBC, 0x08, 0x94, 0x00, 0x00, 0x00, 0x01, 0x0F, 0x84, 0, 0, 0, 0, 0xE9, 0, 0, 0, 0 };

//[00B87213]
BYTE DT_12_Original[5] = { 0xE8, 0xB8, 0x4B, 0xFD, 0xFF };
BYTE DT_12_Modded[48] = { 0xE8, 0, 0, 0, 0, 0x84, 0xC0, 0x0F, 0x84, 0, 0, 0, 0, 0xA1, 0xB8, 0x31, 0x1A, 0x01, 0x8B, 0x48, 0x20, 0x69, 0xC9, 0x74, 0x8C, 0x00, 0x00, 0x8B, 0x84, 0x08, 0x94, 0x00, 0x00, 0x00, 0x83, 0xF8, 0x02, 0x0F, 0x85, 0, 0, 0, 0, 0xE9, 0, 0, 0, 0 };

//[00B877D4]
BYTE DT_13_Original[5] = { 0xE8, 0xF7, 0x45, 0xFD, 0xFF };
BYTE DT_13_Modded[48] = { 0xE8, 0, 0, 0, 0, 0x84, 0xC0, 0x0F, 0x84, 0, 0, 0, 0, 0xA1, 0xB8, 0x31, 0x1A, 0x01, 0x8B, 0x48, 0x20, 0x69, 0xC9, 0x74, 0x8C, 0x00, 0x00, 0x8B, 0x84, 0x08, 0x94, 0x00, 0x00, 0x00, 0x83, 0xF8, 0x02, 0x0F, 0x85, 0, 0, 0, 0, 0xE9, 0, 0, 0, 0 };

//[00B8664B]
BYTE DT_14_Original[5] = { 0xE8, 0x80, 0x57, 0xFD, 0xFF };
BYTE DT_14_Modded[48] = { 0xE8, 0, 0, 0, 0, 0x84, 0xC0, 0x0F, 0x84, 0, 0, 0, 0, 0xA1, 0xB8, 0x31, 0x1A, 0x01, 0x8B, 0x48, 0x20, 0x69, 0xC9, 0x74, 0x8C, 0x00, 0x00, 0x8B, 0x84, 0x08, 0x94, 0x00, 0x00, 0x00, 0x83, 0xF8, 0x02, 0x0F, 0x85, 0, 0, 0, 0, 0xE9, 0, 0, 0, 0 };

//[00B87639]
BYTE DT_15_Original[5] = { 0xE8, 0x92, 0x47, 0xFD, 0xFF };
BYTE DT_15_Modded[48] = { 0xE8, 0, 0, 0, 0, 0x84, 0xC0, 0x0F, 0x84, 0, 0, 0, 0, 0xA1, 0xB8, 0x31, 0x1A, 0x01, 0x8B, 0x48, 0x20, 0x69, 0xC9, 0x74, 0x8C, 0x00, 0x00, 0x8B, 0x84, 0x08, 0x94, 0x00, 0x00, 0x00, 0x83, 0xF8, 0x02, 0x0F, 0x85, 0, 0, 0, 0, 0xE9, 0, 0, 0, 0 };

//[00B87709]
BYTE DT_16_Original[5] = { 0xE8, 0xC2, 0x46, 0xFD, 0xFF };
BYTE DT_16_Modded[48] = { 0xE8, 0, 0, 0, 0, 0x84, 0xC0, 0x0F, 0x84, 0, 0, 0, 0, 0xA1, 0xB8, 0x31, 0x1A, 0x01, 0x8B, 0x48, 0x20, 0x69, 0xC9, 0x74, 0x8C, 0x00, 0x00, 0x8B, 0x84, 0x08, 0x94, 0x00, 0x00, 0x00, 0x83, 0xF8, 0x02, 0x0F, 0x85, 0, 0, 0, 0, 0xE9, 0, 0, 0, 0 };

//[00B877A5]
BYTE DT_17_Original[5] = { 0xE8, 0x26, 0x46, 0xFD, 0xFF };
BYTE DT_17_Modded[48] = { 0xE8, 0, 0, 0, 0, 0x84, 0xC0, 0x0F, 0x84, 0, 0, 0, 0, 0xA1, 0xB8, 0x31, 0x1A, 0x01, 0x8B, 0x48, 0x20, 0x69, 0xC9, 0x74, 0x8C, 0x00, 0x00, 0x8B, 0x84, 0x08, 0x94, 0x00, 0x00, 0x00, 0x83, 0xF8, 0x02, 0x0F, 0x85, 0, 0, 0, 0, 0xE9, 0, 0, 0, 0 };

//[00B89D58]
BYTE DT_18_Original[8] = { 0x83, 0xBC, 0x01, 0x94, 0x00, 0x00, 0x00, 0x00 };
BYTE DT_18_Modded[67] = { 0xF3, 0x0F, 0x10, 0x0D, 0xE4, 0xAD, 0x23, 0x01, 0xF3, 0x0F, 0x10, 0x15, 0xE8, 0xAD, 0x23, 0x01, 0xF3, 0x0F, 0x11, 0x44, 0x24, 0x50, 0xF3, 0x0F, 0x11, 0x4C, 0x24, 0x54, 0xF3, 0x0F, 0x11, 0x54, 0x24, 0x58, 0x83, 0xBC, 0x08, 0x94, 0x00, 0x00, 0x00, 0x01, 0x0F, 0x84, 0, 0, 0, 0, 0x83, 0xBC, 0x08, 0x94, 0x00, 0x00, 0x00, 0x03, 0x0F, 0x84, 0, 0, 0, 0, 0xE9, 0, 0, 0, 0 };

//[00B84D72]
BYTE DT_19_Original[7] = { 0x83, 0xB8, 0x98, 0x00, 0x00, 0x00, 0x00 };
BYTE DT_19_Modded[48] = { 0x83, 0xB8, 0x98, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x85, 0, 0, 0, 0, 0xA1, 0xB8, 0x31, 0x1A, 0x01, 0x8B, 0x48, 0x20, 0x69, 0xC9, 0x74, 0x8C, 0x00, 0x00, 0x8B, 0x84, 0x08, 0x94, 0x00, 0x00, 0x00, 0x83, 0xF8, 0x02, 0x0F, 0x85, 0, 0, 0, 0, 0xE9, 0, 0, 0, 0 };

/* ---------------- Request Action Button ---------------- */

//[00C6BB24]
BYTE DT_20_Original[6] = { 0x8B, 0x8E, 0xE0, 0x00, 0x00, 0x00 };
BYTE DT_20_Modded[70] = { 0xA1, 0xB8, 0x31, 0x1A, 0x01, 0x8B, 0x80, 0xE4, 0x00, 0x00, 0x00, 0x83, 0xC0, 0x20, 0x8B, 0x0D, 0x28, 0xAD, 0x23, 0x01, 0x6A, 0x00, 0x50, 0xE8, 0, 0, 0, 0, 0x84, 0xC0, 0x0F, 0x85, 0, 0, 0, 0, 0x8B, 0x0D, 0x28, 0xAD, 0x23, 0x01, 0x6A, 0x00, 0x6A, 0x5A, 0xE8, 0, 0, 0, 0, 0x84, 0xC0, 0x0F, 0x85, 0, 0, 0, 0, 0x8B, 0x8E, 0xE0, 0x00, 0x00, 0x00, 0xE9, 0, 0, 0, 0 };

//[00C6ACA2]
BYTE DT_21_Original[8] = { 0x53, 0x8B, 0xCE, 0xE8, 0x76, 0xDA, 0xFF, 0xFF };
BYTE DT_21_Modded[72] = { 0xA1, 0xB8, 0x31, 0x1A, 0x01, 0x8B, 0x80, 0xE4, 0x00, 0x00, 0x00, 0x83, 0xC0, 0x20, 0x8B, 0x0D, 0x28, 0xAD, 0x23, 0x01, 0x6A, 0x00, 0x50, 0xE8, 0, 0, 0, 0, 0x84, 0xC0, 0x0F, 0x85, 0, 0, 0, 0, 0x8B, 0x0D, 0x28, 0xAD, 0x23, 0x01, 0x6A, 0x00, 0x6A, 0x5A, 0xE8, 0, 0, 0, 0, 0x84, 0xC0, 0x0F, 0x85, 0, 0, 0, 0, 0x53, 0x8B, 0xCE, 0xE8, 0, 0, 0, 0, 0xE9, 0, 0, 0, 0 };

//[00C6ACFE]
BYTE DT_22_Original[8] = { 0x53, 0x8B, 0xCE, 0xE8, 0x1A, 0xDA, 0xFF, 0xFF };
BYTE DT_22_Modded[72] = { 0xA1, 0xB8, 0x31, 0x1A, 0x01, 0x8B, 0x80, 0xE4, 0x00, 0x00, 0x00, 0x83, 0xC0, 0x20, 0x8B, 0x0D, 0x28, 0xAD, 0x23, 0x01, 0x6A, 0x00, 0x50, 0xE8, 0, 0, 0, 0, 0x84, 0xC0, 0x0F, 0x85, 0, 0, 0, 0, 0x8B, 0x0D, 0x28, 0xAD, 0x23, 0x01, 0x6A, 0x00, 0x6A, 0x5A, 0xE8, 0, 0, 0, 0, 0x84, 0xC0, 0x0F, 0x85, 0, 0, 0, 0, 0x53, 0x8B, 0xCE, 0xE8, 0, 0, 0, 0, 0xE9, 0, 0, 0, 0 };

/* ---------------- WASD Fixes ---------------- */

// REGION: Original Instruction Addresses

DWORD wasd_movement_down_l1_ia = 0x0079F66D;
DWORD wasd_movement_up_l1_ia = 0x0079F698;
DWORD wasd_movement_left_l1_ia = 0x0079F6C1;
DWORD wasd_movement_right_l1_ia = 0x0079F6E9;

DWORD wasd_movement_down_l2_ia = 0x0079F47D;
DWORD wasd_movement_up_l2_ia = 0x0079F4A8;
DWORD wasd_movement_left_l2_ia = 0x0079F4D1;
DWORD wasd_movement_right_l2_ia = 0x0079F4F9;

DWORD kb_inventory_choose_ia = 0x00C6B895;
DWORD kb_inventory_letgo_ia = 0x00C6A85A;
DWORD kb_inventory_choose_imm_ia = 0x00A0F249;
DWORD kb_inventory_letgo_imm_ia = 0x00A0FC5B;

// REGION: Original Instruction Bytes

BYTE wasd_movement_down_l1_ib[] = { 0xF7, 0x84, 0x17, 0xC4, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00 };
BYTE wasd_movement_up_l1_ib[] = { 0xF6, 0x84, 0x17, 0xC4, 0x01, 0x00, 0x00, 0x40 };
BYTE wasd_movement_left_l1_ib[] = { 0x84, 0x9C, 0x17, 0xC4, 0x01, 0x00, 0x00 };
BYTE wasd_movement_right_l1_ib[] = { 0xF6, 0x84, 0x17, 0xC4, 0x01, 0x00, 0x00, 0x80 };

BYTE wasd_movement_down_l2_ib[] = { 0xF7, 0x84, 0x17, 0x64, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00 };
BYTE wasd_movement_up_l2_ib[] = { 0xF6, 0x84, 0x17, 0x64, 0x01, 0x00, 0x00, 0x40 };
BYTE wasd_movement_left_l2_ib[] = { 0x84, 0x9C, 0x17, 0x64, 0x01, 0x00, 0x00 };
BYTE wasd_movement_right_l2_ib[] = { 0xF6, 0x84, 0x17, 0x64, 0x01, 0x00, 0x00, 0x80 };

BYTE kb_inventory_choose_ib[] = { 0x8B, 0x0D, 0x28, 0xAD, 0x23, 0x01 };
BYTE kb_inventory_letgo_ib[] = { 0x6A, 0x00, 0x8B, 0xF1, 0x8B, 0x0D, 0x28, 0xAD, 0x23, 0x01 };
BYTE kb_inventory_choose_imm_ib[] = { 0x8B, 0x0D, 0x28, 0xAD, 0x23, 0x01 };
BYTE kb_inventory_letgo_imm_ib[] = { 0x8B, 0x0D, 0x28, 0xAD, 0x23, 0x01 };

// REGION: ASM Bytes

BYTE wasd_movement_down_l1_ab[] = { 0xF7, 0x84, 0x3A, 0xC8, 0x01, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x0F, 0x85, 0x00, 0x00, 0x00, 0x00, 0xF7, 0x84, 0x3A, 0xC4, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0xE9, 0x00, 0x00, 0x00, 0x00 };
BYTE wasd_movement_up_l1_ab[] = { 0xF7, 0x84, 0x3A, 0xC8, 0x01, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x0F, 0x85, 0x00, 0x00, 0x00, 0x00, 0xF6, 0x84, 0x3A, 0xC4, 0x01, 0x00, 0x00, 0x40, 0xE9, 0x00, 0x00, 0x00, 0x00 };
BYTE wasd_movement_left_l1_ab[] = { 0xF6, 0x84, 0x3A, 0xC8, 0x01, 0x00, 0x00, 0x02, 0x0F, 0x85, 0x00, 0x00, 0x00, 0x00, 0x84, 0x9C, 0x3A, 0xC4, 0x01, 0x00, 0x00, 0xE9, 0x00, 0x00, 0x00, 0x00 };
BYTE wasd_movement_right_l1_ab[] = { 0xF6, 0x84, 0x3A, 0xC8, 0x01, 0x00, 0x00, 0x10, 0x0F, 0x85, 0x00, 0x00, 0x00, 0x00, 0xF6, 0x84, 0x3A, 0xC4, 0x01, 0x00, 0x00, 0x80, 0xE9, 0x00, 0x00, 0x00, 0x00 };

BYTE wasd_movement_down_l2_ab[] = { 0xF7, 0x84, 0x3A, 0x68, 0x01, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x0F, 0x85, 0x00, 0x00, 0x00, 0x00, 0xF7, 0x84, 0x3A, 0x64, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0xE9, 0x00, 0x00, 0x00, 0x00 };
BYTE wasd_movement_up_l2_ab[] = { 0xF7, 0x84, 0x3A, 0x68, 0x01, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x0F, 0x85, 0x00, 0x00, 0x00, 0x00, 0xF6, 0x84, 0x3A, 0x64, 0x01, 0x00, 0x00, 0x40, 0xE9, 0x00, 0x00, 0x00, 0x00 };
BYTE wasd_movement_left_l2_ab[] = { 0xF6, 0x84, 0x3A, 0x68, 0x01, 0x00, 0x00, 0x02, 0x0F, 0x85, 0x00, 0x00, 0x00, 0x00, 0x84, 0x9C, 0x3A, 0x64, 0x01, 0x00, 0x00, 0xE9, 0x00, 0x00, 0x00, 0x00 };
BYTE wasd_movement_right_l2_ab[] = { 0xF6, 0x84, 0x3A, 0x68, 0x01, 0x00, 0x00, 0x10, 0x0F, 0x85, 0x00, 0x00, 0x00, 0x00, 0xF6, 0x84, 0x3A, 0x64, 0x01, 0x00, 0x00, 0x80, 0xE9, 0x00, 0x00, 0x00, 0x00 };

BYTE kb_inventory_choose_ab[] = { 0xA1, 0xB8, 0x31, 0x1A, 0x01, 0x8B, 0x80, 0xE4, 0x00, 0x00, 0x00, 0x83, 0xC0, 0x20, 0x8B, 0x0D, 0x28, 0xAD, 0x23, 0x01, 0x6A, 0x00, 0x50, 0xE8, 0x94, 0xDF, 0x86, 0xFD, 0x84, 0xC0, 0x0F, 0x85, 0x00, 0x00, 0x00, 0x00, 0x8B, 0x0D, 0x28, 0xAD, 0x23, 0x01, 0xE9, 0x00, 0x00, 0x00, 0x00 };
BYTE kb_inventory_letgo_ab[] = { 0x8B, 0xF1, 0xA1, 0xB8, 0x31, 0x1A, 0x01, 0x8B, 0x0D, 0x28, 0xAD, 0x23, 0x01, 0x8B, 0x80, 0xE4, 0x00, 0x00, 0x00, 0x83, 0xC0, 0x20, 0x6A, 0x00, 0x50, 0xE8, 0x00, 0x00, 0x00, 0x00, 0x8B, 0x0D, 0x28, 0xAD, 0x23, 0x01, 0x84, 0xC0, 0x0F, 0x85, 0x00, 0x00, 0x00, 0x00, 0x6A, 0x00, 0x8B, 0x0D, 0x28, 0xAD, 0x23, 0x01, 0xE9, 0x00, 0x00, 0x00, 0x00 };
BYTE kb_inventory_choose_imm_ab[] = { 0xA1, 0xB8, 0x31, 0x1A, 0x01, 0x8B, 0x0D, 0x28, 0xAD, 0x23, 0x01, 0x8B, 0x80, 0xE4, 0x00, 0x00, 0x00, 0x83, 0xC0, 0x20, 0x8B, 0x0D, 0x28, 0xAD, 0x23, 0x01, 0x6A, 0x00, 0x50, 0xE8, 0x00, 0x00, 0x00, 0x00, 0x84, 0xC0, 0x0F, 0x85, 0x00, 0x00, 0x00, 0x00, 0x8B, 0x0D, 0x28, 0xAD, 0x23, 0x01, 0xE9, 0x00, 0x00, 0x00, 0x00 };
BYTE kb_inventory_letgo_imm_ab[] = { 0xA1, 0xB8, 0x31, 0x1A, 0x01, 0x8B, 0x0D, 0x28, 0xAD, 0x23, 0x01, 0x8B, 0x80, 0xE4, 0x00, 0x00, 0x00, 0x83, 0xC0, 0x20, 0x8B, 0x0D, 0x28, 0xAD, 0x23, 0x01, 0x6A, 0x00, 0x50, 0xE8, 0x00, 0x00, 0x00, 0x00, 0x84, 0xC0, 0x0F, 0x85, 0x00, 0x00, 0x00, 0x00, 0x8B, 0x0D, 0x28, 0xAD, 0x23, 0x01, 0xE9, 0x00, 0x00, 0x00, 0x00 };

DWORD WINAPI MainThread(LPVOID param)
{
    Sleep(2000);

    if (!Game::ValidateGameVersion())
    {
        MessageBox(0, L"Unsupported game version, mod disabled.", L"Resident Evil 5 - Quality of Life Patches", MB_ICONINFORMATION);

        Sleep(100);
        FreeLibraryAndExitThread((HMODULE)param, 0);

        return 0;
    }

    DWORD JB;

    /* ---------------- LIN + Type C ---------------- */

    //[00B85363]
    Hook((LPVOID*)0x00B85363, &DT_1_Modded[0], sizeof(DT_1_Original));
    JB = 0x00B85385 - (DWORD)&DT_1_Modded[18 + 4];
    *(DWORD*)((DWORD)&DT_1_Modded[18]) = JB;
    JB = 0x00B85A76 - (DWORD)&DT_1_Modded[48 + 4];
    *(DWORD*)((DWORD)&DT_1_Modded[48]) = JB;
    JB = 0x00B85385 - (DWORD)&DT_1_Modded[55 + 4];
    *(DWORD*)((DWORD)&DT_1_Modded[55]) = JB;

    //[00B85AA9]
    Hook((LPVOID*)0x00B85AA9, &DT_2_Modded[0], sizeof(DT_2_Original));
    JB = 0x00B85AB2 - (DWORD)&DT_2_Modded[15 + 4];
    *(DWORD*)((DWORD)&DT_2_Modded[15]) = JB;
    JB = 0x00B85AB2 - (DWORD)&DT_2_Modded[28 + 4];
    *(DWORD*)((DWORD)&DT_2_Modded[28]) = JB;
    JB = 0x00B85AB4 - (DWORD)&DT_2_Modded[58 + 4];
    *(DWORD*)((DWORD)&DT_2_Modded[58]) = JB;
    JB = 0x00B85AB2 - (DWORD)&DT_2_Modded[63 + 4];
    *(DWORD*)((DWORD)&DT_2_Modded[63]) = JB;

    //[00B7493E]
    Hook((LPVOID*)0x00B7493E, &DT_3_Modded[0], sizeof(DT_3_Original));
    JB = 0x00B74B0A - (DWORD)&DT_3_Modded[4 + 4];
    *(DWORD*)((DWORD)&DT_3_Modded[4]) = JB;
    JB = 0x00B74B0A - (DWORD)&DT_3_Modded[23 + 4];
    *(DWORD*)((DWORD)&DT_3_Modded[23]) = JB;
    JB = 0x00B74946 - (DWORD)&DT_3_Modded[53 + 4];
    *(DWORD*)((DWORD)&DT_3_Modded[53]) = JB;
    JB = 0x00B74B0A - (DWORD)&DT_3_Modded[58 + 4];
    *(DWORD*)((DWORD)&DT_3_Modded[58]) = JB;

    //[00B845EA]
    Hook((LPVOID*)0x00B845EA, &DT_4_Modded[0], sizeof(DT_4_Original));
    JB = 0x00B84DB1 - (DWORD)&DT_4_Modded[15 + 4];
    *(DWORD*)((DWORD)&DT_4_Modded[15]) = JB;
    JB = 0x00B845EF - (DWORD)&DT_4_Modded[25 + 4];
    *(DWORD*)((DWORD)&DT_4_Modded[25]) = JB;

    //[00B73CDA]
    Hook((LPVOID*)0x00B73CDA, &DT_5_Modded[0], sizeof(DT_5_Original));
    JB = 0x00B742D0 - (DWORD)&DT_5_Modded[15 + 4];
    *(DWORD*)((DWORD)&DT_5_Modded[15]) = JB;
    JB = 0x00B73CDF - (DWORD)&DT_5_Modded[25 + 4];
    *(DWORD*)((DWORD)&DT_5_Modded[25]) = JB;

    //[00B867C5]
    Hook((LPVOID*)0x00B867C5, &DT_6_Modded[0], sizeof(DT_6_Original));
    JB = 0x00B867CE - (DWORD)&DT_6_Modded[15 + 4];
    *(DWORD*)((DWORD)&DT_6_Modded[15]) = JB;
    JB = 0x00B867CC - (DWORD)&DT_6_Modded[27 + 4];
    *(DWORD*)((DWORD)&DT_6_Modded[27]) = JB;

    //[00B8721C]
    Hook((LPVOID*)0x00B8721C, &DT_7_Modded[0], sizeof(DT_7_Original));
    JB = 0x00B87260 - (DWORD)&DT_7_Modded[15 + 4];
    *(DWORD*)((DWORD)&DT_7_Modded[15]) = JB;
    JB = 0x00B87223 - (DWORD)&DT_7_Modded[27 + 4];
    *(DWORD*)((DWORD)&DT_7_Modded[27]) = JB;

    //[00B67FC2]
    Hook((LPVOID*)0x00B67FC2, &DT_8_Modded[0], sizeof(DT_8_Original));
    JB = 0x00B67FD2 - (DWORD)&DT_8_Modded[33 + 4];
    *(DWORD*)((DWORD)&DT_8_Modded[33]) = JB;
    JB = 0x00B67FC9 - (DWORD)&DT_8_Modded[38 + 4];
    *(DWORD*)((DWORD)&DT_8_Modded[38]) = JB;

    //[00849A6F]
    Hook((LPVOID*)0x00849A6F, &DT_9_Modded[0], sizeof(DT_9_Original));
    JB = 0x00849BC2 - (DWORD)&DT_9_Modded[21 + 4];
    *(DWORD*)((DWORD)&DT_9_Modded[21]) = JB;
    JB = 0x00849A91 - (DWORD)&DT_9_Modded[26 + 4];
    *(DWORD*)((DWORD)&DT_9_Modded[26]) = JB;

    //[00B78AC3]
    Hook((LPVOID*)0x00B78AC3, &DT_10_Modded[0], sizeof(DT_10_Original));
    JB = 0x00B78AD7 - (DWORD)&DT_10_Modded[48 + 4];
    *(DWORD*)((DWORD)&DT_10_Modded[48]) = JB;

    //[00B89AC6]
    Hook((LPVOID*)0x00B89AC6, &DT_11_Modded[0], sizeof(DT_11_Original));
    JB = 0x00B89B10 - (DWORD)&DT_11_Modded[10 + 4];
    *(DWORD*)((DWORD)&DT_11_Modded[10]) = JB;
    JB = 0x00B89B0B - (DWORD)&DT_11_Modded[15 + 4];
    *(DWORD*)((DWORD)&DT_11_Modded[15]) = JB;

    //[00B87213]
    Hook((LPVOID*)0x00B87213, &DT_12_Modded[0], sizeof(DT_12_Original));
    JB = 0x00B5BDD0 - (DWORD)&DT_12_Modded[1 + 4];
    *(DWORD*)((DWORD)&DT_12_Modded[1]) = JB;
    JB = 0x00B87260 - (DWORD)&DT_12_Modded[9 + 4];
    *(DWORD*)((DWORD)&DT_12_Modded[9]) = JB;
    JB = 0x00B8721C - (DWORD)&DT_12_Modded[39 + 4];
    *(DWORD*)((DWORD)&DT_12_Modded[39]) = JB;
    JB = 0x00B87260 - (DWORD)&DT_12_Modded[44 + 4];
    *(DWORD*)((DWORD)&DT_12_Modded[44]) = JB;

    //[00B877D4]
    Hook((LPVOID*)0x00B877D4, &DT_13_Modded[0], sizeof(DT_13_Original));
    JB = 0x00B5BDD0 - (DWORD)&DT_13_Modded[1 + 4];
    *(DWORD*)((DWORD)&DT_13_Modded[1]) = JB;
    JB = 0x00B877DD - (DWORD)&DT_13_Modded[9 + 4];
    *(DWORD*)((DWORD)&DT_13_Modded[9]) = JB;
    JB = 0x00B877F3 - (DWORD)&DT_13_Modded[39 + 4];
    *(DWORD*)((DWORD)&DT_13_Modded[39]) = JB;
    JB = 0x00B877DD - (DWORD)&DT_13_Modded[44 + 4];
    *(DWORD*)((DWORD)&DT_13_Modded[44]) = JB;

    //[00B8664B]
    Hook((LPVOID*)0x00B8664B, &DT_14_Modded[0], sizeof(DT_14_Original));
    JB = 0x00B5BDD0 - (DWORD)&DT_14_Modded[1 + 4];
    *(DWORD*)((DWORD)&DT_14_Modded[1]) = JB;
    JB = 0x00B86659 - (DWORD)&DT_14_Modded[9 + 4];
    *(DWORD*)((DWORD)&DT_14_Modded[9]) = JB;
    JB = 0x00B86654 - (DWORD)&DT_14_Modded[39 + 4];
    *(DWORD*)((DWORD)&DT_14_Modded[39]) = JB;
    JB = 0x00B86659 - (DWORD)&DT_14_Modded[44 + 4];
    *(DWORD*)((DWORD)&DT_14_Modded[44]) = JB;

    //[00B87639]
    Hook((LPVOID*)0x00B87639, &DT_15_Modded[0], sizeof(DT_15_Original));
    JB = 0x00B5BDD0 - (DWORD)&DT_15_Modded[1 + 4];
    *(DWORD*)((DWORD)&DT_15_Modded[1]) = JB;
    JB = 0x00B87658 - (DWORD)&DT_15_Modded[9 + 4];
    *(DWORD*)((DWORD)&DT_15_Modded[9]) = JB;
    JB = 0x00B87642 - (DWORD)&DT_15_Modded[39 + 4];
    *(DWORD*)((DWORD)&DT_15_Modded[39]) = JB;
    JB = 0x00B87658 - (DWORD)&DT_15_Modded[44 + 4];
    *(DWORD*)((DWORD)&DT_15_Modded[44]) = JB;

    //[00B87709]
    Hook((LPVOID*)0x00B87709, &DT_16_Modded[0], sizeof(DT_16_Original));
    JB = 0x00B5BDD0 - (DWORD)&DT_16_Modded[1 + 4];
    *(DWORD*)((DWORD)&DT_16_Modded[1]) = JB;
    JB = 0x00B87712 - (DWORD)&DT_16_Modded[9 + 4];
    *(DWORD*)((DWORD)&DT_16_Modded[9]) = JB;
    JB = 0x00B87728 - (DWORD)&DT_16_Modded[39 + 4];
    *(DWORD*)((DWORD)&DT_16_Modded[39]) = JB;
    JB = 0x00B87712 - (DWORD)&DT_16_Modded[44 + 4];
    *(DWORD*)((DWORD)&DT_16_Modded[44]) = JB;

    //[00B877A5]
    Hook((LPVOID*)0x00B877A5, &DT_17_Modded[0], sizeof(DT_17_Original));
    JB = 0x00B5BDD0 - (DWORD)&DT_17_Modded[1 + 4];
    *(DWORD*)((DWORD)&DT_17_Modded[1]) = JB;
    JB = 0x00B877C4 - (DWORD)&DT_17_Modded[9 + 4];
    *(DWORD*)((DWORD)&DT_17_Modded[9]) = JB;
    JB = 0x00B877AE - (DWORD)&DT_17_Modded[39 + 4];
    *(DWORD*)((DWORD)&DT_17_Modded[39]) = JB;
    JB = 0x00B877C4 - (DWORD)&DT_17_Modded[44 + 4];
    *(DWORD*)((DWORD)&DT_17_Modded[44]) = JB;

    //[00B89D58]
    Hook((LPVOID*)0x00B89D58, &DT_18_Modded[0], sizeof(DT_18_Original));
    JB = 0x00B89DCE - (DWORD)&DT_18_Modded[44 + 4];
    *(DWORD*)((DWORD)&DT_18_Modded[44]) = JB;
    JB = 0x00B89DCE - (DWORD)&DT_18_Modded[58 + 4];
    *(DWORD*)((DWORD)&DT_18_Modded[58]) = JB;
    JB = 0x00B89D84 - (DWORD)&DT_18_Modded[63 + 4];
    *(DWORD*)((DWORD)&DT_18_Modded[63]) = JB;

    //[00B84D72]
    Hook((LPVOID*)0x00B84D72, &DT_19_Modded[0], sizeof(DT_19_Original));
    JB = 0x00B84D7B - (DWORD)&DT_19_Modded[9 + 4];
    *(DWORD*)((DWORD)&DT_19_Modded[9]) = JB;
    JB = 0x00B84DB5 - (DWORD)&DT_19_Modded[39 + 4];
    *(DWORD*)((DWORD)&DT_19_Modded[39]) = JB;
    JB = 0x00B84D7B - (DWORD)&DT_19_Modded[44 + 4];
    *(DWORD*)((DWORD)&DT_19_Modded[44]) = JB;

    /* ---------------- Request Action Button ---------------- */

    //[00C6BB24]
    Hook((LPVOID*)0x00C6BB24, &DT_20_Modded[0], sizeof(DT_20_Original));
    JB = 0x0079DFB0 - (DWORD)&DT_20_Modded[24 + 4];
    *(DWORD*)((DWORD)&DT_20_Modded[24]) = JB;
    JB = 0x00C6BB58 - (DWORD)&DT_20_Modded[32 + 4];
    *(DWORD*)((DWORD)&DT_20_Modded[32]) = JB;
    JB = 0x0079DFB0 - (DWORD)&DT_20_Modded[47 + 4];
    *(DWORD*)((DWORD)&DT_20_Modded[47]) = JB;
    JB = 0x00C6BB58 - (DWORD)&DT_20_Modded[55 + 4];
    *(DWORD*)((DWORD)&DT_20_Modded[55]) = JB;
    JB = 0x00C6BB2A - (DWORD)&DT_20_Modded[66 + 4];
    *(DWORD*)((DWORD)&DT_20_Modded[66]) = JB;

    //[00C6ACA2]
    Hook((LPVOID*)0x00C6ACA2, &DT_21_Modded[0], sizeof(DT_21_Original));
    JB = 0x0079DFB0 - (DWORD)&DT_21_Modded[24 + 4];
    *(DWORD*)((DWORD)&DT_21_Modded[24]) = JB;
    JB = 0x00C6ACB5 - (DWORD)&DT_21_Modded[32 + 4];
    *(DWORD*)((DWORD)&DT_21_Modded[32]) = JB;
    JB = 0x0079DFB0 - (DWORD)&DT_21_Modded[47 + 4];
    *(DWORD*)((DWORD)&DT_21_Modded[47]) = JB;
    JB = 0x00C6ACB5 - (DWORD)&DT_21_Modded[55 + 4];
    *(DWORD*)((DWORD)&DT_21_Modded[55]) = JB;
    JB = 0x00C68720 - (DWORD)&DT_21_Modded[63 + 4];
    *(DWORD*)((DWORD)&DT_21_Modded[63]) = JB;
    JB = 0x00C6ACAA - (DWORD)&DT_21_Modded[68 + 4];
    *(DWORD*)((DWORD)&DT_21_Modded[68]) = JB;

    //[00C6ACFE]
    Hook((LPVOID*)0x00C6ACFE, &DT_22_Modded[0], sizeof(DT_22_Original));
    JB = 0x0079DFB0 - (DWORD)&DT_22_Modded[24 + 4];
    *(DWORD*)((DWORD)&DT_22_Modded[24]) = JB;
    JB = 0x00C6AD11 - (DWORD)&DT_22_Modded[32 + 4];
    *(DWORD*)((DWORD)&DT_22_Modded[32]) = JB;
    JB = 0x0079DFB0 - (DWORD)&DT_22_Modded[47 + 4];
    *(DWORD*)((DWORD)&DT_22_Modded[47]) = JB;
    JB = 0x00C6AD11 - (DWORD)&DT_22_Modded[55 + 4];
    *(DWORD*)((DWORD)&DT_22_Modded[55]) = JB;
    JB = 0x00C68720 - (DWORD)&DT_22_Modded[63 + 4];
    *(DWORD*)((DWORD)&DT_22_Modded[63]) = JB;
    JB = 0x00C6AD06 - (DWORD)&DT_22_Modded[68 + 4];
    *(DWORD*)((DWORD)&DT_22_Modded[68]) = JB;

    /* ---------------- WASD Fixes ---------------- */

    // [0079F66D] wasd movement down (layer 1)
    Hook((LPVOID*)wasd_movement_down_l1_ia, &wasd_movement_down_l1_ab[0], sizeof(wasd_movement_down_l1_ib));
    JB = 0x0079F67A - ((DWORD)&wasd_movement_down_l1_ab[13] + 4);
    *(DWORD*)((DWORD)&wasd_movement_down_l1_ab[13]) = JB;
    JB = 0x0079F678 - ((DWORD)&wasd_movement_down_l1_ab[29] + 4);
    *(DWORD*)((DWORD)&wasd_movement_down_l1_ab[29]) = JB;

    // [0079F698] wasd movement up (layer 1)
    Hook((LPVOID*)wasd_movement_up_l1_ia, &wasd_movement_up_l1_ab[0], sizeof(wasd_movement_up_l1_ib));
    JB = 0x0079F6A2 - ((DWORD)&wasd_movement_up_l1_ab[13] + 4);
    *(DWORD*)((DWORD)&wasd_movement_up_l1_ab[13]) = JB;
    JB = 0x0079F6A0 - ((DWORD)&wasd_movement_up_l1_ab[26] + 4);
    *(DWORD*)((DWORD)&wasd_movement_up_l1_ab[26]) = JB;

    // [0079F6C1] wasd movement left (layer 1)
    Hook((LPVOID*)wasd_movement_left_l1_ia, &wasd_movement_left_l1_ab[0], sizeof(wasd_movement_left_l1_ib));
    JB = 0x0079F6CA - ((DWORD)&wasd_movement_left_l1_ab[10] + 4);
    *(DWORD*)((DWORD)&wasd_movement_left_l1_ab[10]) = JB;
    JB = 0x0079F6C8 - ((DWORD)&wasd_movement_left_l1_ab[22] + 4);
    *(DWORD*)((DWORD)&wasd_movement_left_l1_ab[22]) = JB;

    // [0079F6E9] wasd movement right (layer 1)
    Hook((LPVOID*)wasd_movement_right_l1_ia, &wasd_movement_right_l1_ab[0], sizeof(wasd_movement_right_l1_ib));
    JB = 0x0079F6F3 - ((DWORD)&wasd_movement_right_l1_ab[10] + 4);
    *(DWORD*)((DWORD)&wasd_movement_right_l1_ab[10]) = JB;
    JB = 0x0079F6F1 - ((DWORD)&wasd_movement_right_l1_ab[23] + 4);
    *(DWORD*)((DWORD)&wasd_movement_right_l1_ab[23]) = JB;

    // [0079F47D] wasd movement down (layer 2)
    Hook((LPVOID*)wasd_movement_down_l2_ia, &wasd_movement_down_l2_ab[0], sizeof(wasd_movement_down_l2_ib));
    JB = 0x0079F48A - ((DWORD)&wasd_movement_down_l2_ab[13] + 4);
    *(DWORD*)((DWORD)&wasd_movement_down_l2_ab[13]) = JB;
    JB = 0x0079F488 - ((DWORD)&wasd_movement_down_l2_ab[29] + 4);
    *(DWORD*)((DWORD)&wasd_movement_down_l2_ab[29]) = JB;

    // [0079F4A8] wasd movement up (layer 2)
    Hook((LPVOID*)wasd_movement_up_l2_ia, &wasd_movement_up_l2_ab[0], sizeof(wasd_movement_up_l2_ib));
    JB = 0x0079F4B2 - ((DWORD)&wasd_movement_up_l2_ab[13] + 4);
    *(DWORD*)((DWORD)&wasd_movement_up_l2_ab[13]) = JB;
    JB = 0x0079F4B0 - ((DWORD)&wasd_movement_up_l2_ab[26] + 4);
    *(DWORD*)((DWORD)&wasd_movement_up_l2_ab[26]) = JB;

    // [0079F4D1] wasd movement left (layer 2)
    Hook((LPVOID*)wasd_movement_left_l2_ia, &wasd_movement_left_l2_ab[0], sizeof(wasd_movement_left_l2_ib));
    JB = 0x0079F4DA - ((DWORD)&wasd_movement_left_l2_ab[10] + 4);
    *(DWORD*)((DWORD)&wasd_movement_left_l2_ab[10]) = JB;
    JB = 0x0079F4D8 - ((DWORD)&wasd_movement_left_l2_ab[22] + 4);
    *(DWORD*)((DWORD)&wasd_movement_left_l2_ab[22]) = JB;

    // [0079F4F9] wasd movement right (layer 2)
    Hook((LPVOID*)wasd_movement_right_l2_ia, &wasd_movement_right_l2_ab[0], sizeof(wasd_movement_right_l2_ib));
    JB = 0x0079F503 - ((DWORD)&wasd_movement_right_l2_ab[10] + 4);
    *(DWORD*)((DWORD)&wasd_movement_right_l2_ab[10]) = JB;
    JB = 0x0079F501 - ((DWORD)&wasd_movement_right_l2_ab[23] + 4);
    *(DWORD*)((DWORD)&wasd_movement_right_l2_ab[23]) = JB;

    // [00C6B895] kb inventory choose
    Hook((LPVOID*)kb_inventory_choose_ia, &kb_inventory_choose_ab[0], sizeof(kb_inventory_choose_ib));
    JB = 0x0079DFB0 - ((DWORD)&kb_inventory_choose_ab[24] + 4);
    *(DWORD*)((DWORD)&kb_inventory_choose_ab[24]) = JB;
    JB = 0x00C6B8AC - ((DWORD)&kb_inventory_choose_ab[32] + 4);
    *(DWORD*)((DWORD)&kb_inventory_choose_ab[32]) = JB;
    JB = 0x00C6B89B - ((DWORD)&kb_inventory_choose_ab[43] + 4);
    *(DWORD*)((DWORD)&kb_inventory_choose_ab[43]) = JB;

    // [00C6A85A] kb inventory let go
    Hook((LPVOID*)kb_inventory_letgo_ia, &kb_inventory_letgo_ab[0], sizeof(kb_inventory_letgo_ib));
    JB = 0x0079DFB0 - ((DWORD)&kb_inventory_letgo_ab[26] + 4);
    *(DWORD*)((DWORD)&kb_inventory_letgo_ab[26]) = JB;
    JB = 0x00C6A875 - ((DWORD)&kb_inventory_letgo_ab[40] + 4);
    *(DWORD*)((DWORD)&kb_inventory_letgo_ab[40]) = JB;
    JB = 0x00C6A864 - ((DWORD)&kb_inventory_letgo_ab[53] + 4);
    *(DWORD*)((DWORD)&kb_inventory_letgo_ab[53]) = JB;

    // [00A0F249] kb inventory choose (item management menu)
    Hook((LPVOID*)kb_inventory_choose_imm_ia, &kb_inventory_choose_imm_ab[0], sizeof(kb_inventory_choose_imm_ib));
    JB = 0x0079DFB0 - ((DWORD)&kb_inventory_choose_imm_ab[30] + 4);
    *(DWORD*)((DWORD)&kb_inventory_choose_imm_ab[30]) = JB;
    JB = 0x00A0F451 - ((DWORD)&kb_inventory_choose_imm_ab[38] + 4);
    *(DWORD*)((DWORD)&kb_inventory_choose_imm_ab[38]) = JB;
    JB = 0x00A0F24F - ((DWORD)&kb_inventory_choose_imm_ab[49] + 4);
    *(DWORD*)((DWORD)&kb_inventory_choose_imm_ab[49]) = JB;

    // [00A0FC5B] kb inventory let go (item management menu)
    Hook((LPVOID*)kb_inventory_letgo_imm_ia, &kb_inventory_letgo_imm_ab[0], sizeof(kb_inventory_letgo_imm_ib));
    JB = 0x0079DFB0 - ((DWORD)&kb_inventory_letgo_imm_ab[30] + 4);
    *(DWORD*)((DWORD)&kb_inventory_letgo_imm_ab[30]) = JB;
    JB = 0x00A0FD07 - ((DWORD)&kb_inventory_letgo_imm_ab[38] + 4);
    *(DWORD*)((DWORD)&kb_inventory_letgo_imm_ab[38]) = JB;
    JB = 0x00A0FC61 - ((DWORD)&kb_inventory_letgo_imm_ab[49] + 4);
    *(DWORD*)((DWORD)&kb_inventory_letgo_imm_ab[49]) = JB;

    Mod::Hooks::Initialize();

    return 0;
}

BOOL APIENTRY DllMain(HMODULE hModule, DWORD  ul_reason_for_call, LPVOID lpReserved)
{
    switch (ul_reason_for_call)
    {
    case DLL_PROCESS_ATTACH:
        CreateThread(0, 0, MainThread, hModule, 0, 0);
        break;
    case DLL_THREAD_ATTACH:
    case DLL_THREAD_DETACH:
    case DLL_PROCESS_DETACH:
        break;
    }
    return TRUE;
}

